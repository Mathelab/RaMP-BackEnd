.rs.restartR()
library(shiny)
library(shinydashboard)
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
library(plotly)
library(shiny)
library(shinydashboard)
library(plotly)
?updateSelectInput
a <- c('a','b','c')
b<- 'b'
a <- a[b %in% a]
a
shiny::runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
library(matlib)
A <- matrix(
c(1,2,0,
0,1,1,
0,0,2),
3,3, byrow = T
)
A
b <- matrix(
c(1,0,0),3,1
)
b
a * b
a %*% b
A <- matrix(
c(1,3,-3,2,-3,4,
3,9,10,10,-14,2,
2,6,-10,21,-25,53),
3,6, byrow = T
)
A
echelon(A)
library(matlib)
echelon(A)
A*10
rref(A)
echelon(A,verbose = T,fractions = T)
echelon(A,verbose = F,fractions = T)
A
A <- matrix(
c(1,3,-3,2,-3,4,
3,9,-10,10,-14,2,
2,6,-10,21,-25,53),
3,6, byrow = T
)
A
echelon(A,verbose = F,fractions = T)
A <- matrix(
c(1,3,-3,2,-3,4,
3,9,-10,10,-14,2,
2,6,-10,21,-25,53),
3,6, byrow = T
)
A
echelon(A,verbose = T,fractions = T)
A <- matrix(
c(3,4,2,
1,7,6),2,3
byrow = T
)
A <- matrix(
c(3,4,2,
1,7,6),2,
3,
byrow = T
)
C = matrix(
c(2,1,4,0,
6,1,3,5,
2,4,2,0),
3,4,byrow = T
)
A%*%C
shiny::runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
library(plotly)
plot_ly(mtcars$mpg,mtcars$cyl)
plot_ly(mtcars,mtcars$mpg,mtcars$cyl)
plot_ly(mtcars,~mpg,~cyl)
plot_ly(mtcars,~mpg,~cyl,type ='scatter')
plot_ly(mtcars,x= ~mpg,y = ~cyl,type ='scatter')
mtcars['mpg']
plot_ly(x = mtcars['mpg'],y = mtcars['cyl'],type = 'scatter')
plot_ly(x = mtcars$mpg,y = mtcars$cyl,type = 'scatter')
plot_ly(x = mtcars['mpg'],y = mtcars$cyl,type = 'scatter')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
plot_ly(x = c(1,2,3),y = c(2,4,6),type = 'scatter')
typeof(mtcars['mpg'])
typeof(unlist(mtcars['mpg']))
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
?sliderInput
runApp('RProject/BiometricsUI')
shiny::runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
runApp('RProject/BiometricsUI')
setwd("~/RProject/matheLab")
setwd("~/RProject/matheLab/paperHeatMap")
library(RMySQL)
findAnalyteHasPathway <- function(pathwayRampId,GC = "C",n = 10){
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ehe131224',
host = 'localhost')
on.exit(dbDisconnect(con))
p_id <- unique(pathwayRampId)
p_id <- sapply(p_id,shQuote)
p_id <- paste(p_id,collapse = ",")
query <-paste0("select * from analytehaspathway where pathwayRampId in (",
p_id,
");")
df <- dbGetQuery(con,
query)
df2 <- aggregate(df$rampId,list(df$pathwayRampId),FUN = function(x){
x <- x[grepl(paste0("RAMP_",GC,"_"),x)]
if(length(x) >= n ){
paste(x,collapse = ",")
} else {
x <- 0
}
})
fdf <- df2[df2$x!=0,]
fdf2 <- data.frame(fdf[,-1],row.names = fdf[,1],stringsAsFactors = F)
df.list <- setNames(split(fdf2, seq(nrow(fdf2))), rownames(fdf2))
df.list <- lapply(df.list,FUN = function(x){
text <- x[[1]]
text <- strsplit(text,split = ",")
})
df.list <- lapply(df.list,unlist)
} # end of function
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ehe131224',
host = 'localhost')
pathways<- dbGetQuery(con,'select * from pathway;')
dbname <- unique(pathways$type)
pathwayInKegg <- pathways[pathways$type == 'kegg',]
pathwayInWiki <- pathways[pathways$type == 'wiki',]
pathwayInReac <- pathways[pathways$type == 'reactome',]
min_analyte <- 5
library(RMySQL)
findAnalyteHasPathway <- function(pathwayRampId,GC = "C",n = 10){
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ehe131224',
host = 'localhost')
on.exit(dbDisconnect(con))
p_id <- unique(pathwayRampId)
p_id <- sapply(p_id,shQuote)
p_id <- paste(p_id,collapse = ",")
query <-paste0("select * from analytehaspathway where pathwayRampId in (",
p_id,
");")
df <- dbGetQuery(con,
query)
df2 <- aggregate(df$rampId,list(df$pathwayRampId),FUN = function(x){
x <- x[grepl(paste0("RAMP_",GC,"_"),x)]
if(length(x) >= n ){
paste(x,collapse = ",")
} else {
x <- 0
}
})
fdf <- df2[df2$x!=0,]
fdf2 <- data.frame(fdf[,-1],row.names = fdf[,1],stringsAsFactors = F)
df.list <- setNames(split(fdf2, seq(nrow(fdf2))), rownames(fdf2))
df.list <- lapply(df.list,FUN = function(x){
text <- x[[1]]
text <- strsplit(text,split = ",")
})
df.list <- lapply(df.list,unlist)
} # end of function
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ehe131224',
host = 'localhost')
pathways<- dbGetQuery(con,'select * from pathway;')
dbname <- unique(pathways$type)
pathwayInKegg <- pathways[pathways$type == 'kegg',]
pathwayInWiki <- pathways[pathways$type == 'wiki',]
pathwayInReac <- pathways[pathways$type == 'reactome',]
min_analyte <- 10
listOfKeggC <- findAnalyteHasPathway(pathwayInKegg$pathwayRampId,n = min_analyte)
listOfWikiC <- findAnalyteHasPathway(pathwayInWiki$pathwayRampId,n = min_analyte)
listOfReacC <- findAnalyteHasPathway(pathwayInReac$pathwayRampId,n = min_analyte)
listOfKeggG <- findAnalyteHasPathway(pathwayInKegg$pathwayRampId,GC="G",n = min_analyte)
listOfWikiG <- findAnalyteHasPathway(pathwayInWiki$pathwayRampId,GC="G",n = min_analyte)
listOfReacG <- findAnalyteHasPathway(pathwayInReac$pathwayRampId,GC="G",n = min_analyte)
pathwayid <- c(#names(listOfHmdbC),
names(listOfKeggC),
names(listOfWikiC),
names(listOfReacC))
metabolite_result <- matrix(NA,nrow = length(pathwayid),ncol = length(pathwayid))
colnames(metabolite_result) <- pathwayid
rownames(metabolite_result) <- pathwayid
colnames(metabolite_result2) <- pathwayid
rownames(metabolite_result2) <- pathwayid
pathToanalC <- do.call(c,list(#listOfHmdbC,
listOfKeggC,
listOfWikiC,
listOfReacC))
for(i in 1:length(pathwayid)){
id <- pathwayid[i]
cid <- pathToanalC[[i]]
for (j in 1:length(pathwayid)) {
if(is.na(metabolite_result[i,j])){
if(i==j){
metabolite_result[i,j] <- 1
}else{
cid2 <- pathToanalC[[j]]
shared_metabolite <- unique(intersect(cid,cid2))
total <- unique(union(cid,cid2))
metabolite_result[i,j] <- length(shared_metabolite)/length(total)
print(metabolite_result[i,j])
if(is.na(metabolite_result[j,i])){
metabolite_result[j,i] <- metabolite_result[i,j]
}
}
}
print(paste("Compute for ",i,",",j))
}
}
pathwayidG <- c(#names(listOfHmdbG),
names(listOfKeggG),
names(listOfWikiG),
names(listOfReacG))
gene_result <- matrix(NA,nrow = length(pathwayidG),ncol = length(pathwayidG))
colnames(gene_result) <- pathwayidG
rownames(gene_result) <- pathwayidG
colnames(gene_result2) <- pathwayidG
rownames(gene_result2) <- pathwayidG
pathToanalG <- do.call(c,list(#listOfHmdbG,
listOfKeggG,
listOfWikiG,
listOfReacG))
for(i in 1:length(pathwayidG)){
id <- pathwayidG[i]
cid <- pathToanalG[[i]]
for (j in 1:length(pathwayidG)) {
if(is.na(gene_result[i,j])){
if(i==j){
gene_result[i,j] <- 1
}else{
cid2 <- pathToanalG[[j]]
shared_metabolite <- unique(intersect(cid,cid2))
total <- unique(union(cid,cid2))
gene_result[i,j] <- length(shared_metabolite)/length(total)
print(gene_result[i,j])
if(is.na(gene_result[j,i])){
gene_result[j,i] <- gene_result[i,j]
}
}
}
print(paste("Compute for ",i,",",j))
}
}
library(plotly)
library(magrittr)
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
colors = c('#ece7f2','#2b8cbe'),
width = 1200,
height = 1200,
type = "heatmap") %>%
layout(title = "metabolites overlap",
font = list(
size = 40
),
autosize = TRUE,
margin = list(l = 150,
r = 100,
t = 100,
b = 200),
xaxis = list(
type = "category",
autoticks = FALSE,
ticks = "inside",
showline = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
autorange = TRUE
),
yaxis = list(
type = "category",
ticks = "inside",
showline = FALSE,
zeroline = FALSE,
showticklabels =FALSE,
autorange = TRUE
)
)
p_metabolites
finderPathways <- function(SourceId,rampIdHasPathway){
hmdbSourceId <- unique(SourceId$V1)
hmdbSourceId <- sapply(hmdbSourceId,shQuote)
hmdbSourceId <- paste(hmdbSourceId,collapse = ",")
query <- paste0("select * from source where sourceId in (",hmdbSourceId,");")
df <- dbGetQuery(con,query)
#return(df)
rampId <- intersect(df$rampId,rampIdHasPathway)
}
finderPathways2 <- function(Ids){
Ids <- unique(Ids)
Ids <- sapply(Ids,shQuote)
Ids <- paste(Ids,collapse = ",")
query <- paste0("select * from analytehasPathway where rampId in (",Ids,");")
df <- dbGetQuery(con,query)
}
finderPathways3 <- function(dfOfIds){
cid <- unique(dfOfIds$rampId)
pid <- unique(dfOfIds$pathwayRampId)
pathSource <- c("hmdb","kegg","wiki","reactome")
output <- data.frame(metabolites = NULL,totpathways = NULL,hmdb=NULL,
kegg =NULL,wiki=NULL,reac = NULL)
for(id in cid){
print(id)
pathways <- dfOfIds[dfOfIds$rampId == id,]
numOfPathway <- vector()
for(db in pathSource){
numOfPathway <- c(numOfPathway,nrow(unique(pathways[pathways$pathwaySource == db,])))
# print(pathways[pathways$type == db,])
# Sys.sleep(3)
}
output <- rbind(output,data.frame(
metabolites = id,totpathways = nrow(pathways),
hmdb = numOfPathway[1],
kegg = numOfPathway[2],
wiki = numOfPathway[3],
reac = numOfPathway[4]
))
}
return(output)
}
con <- dbConnect(MySQL(),
dbname ="mathelabramp",
host ="localhost",
password = "Ehe131224",
username = "root")
hmdb <- read.table('data/hmdbmetaboliteIDDictionary.txt')
kegg <- read.table("data/keggmetaboliteIDDictionary.txt")
hmdb <- read.table('data/hmdbmetaboliteIDDictionary.txt')
kegg <- read.table("data/keggmetaboliteIDDictionary.txt")
setwd("~/RProject/matheLab/paperHeatMap/Compiled Code for figure in paper")
hmdb <- read.table('data/hmdbmetaboliteIDDictionary.txt')
kegg <- read.table("data/keggmetaboliteIDDictionary.txt")
wiki <- read.table("data/wikimetaboliteIDDictionary.txt")
reac <- read.table("data/reactomemetaboliteIDDictionary.txt")
hmdb <- data.frame(V1 = as.character(unique(hmdb$V1)))
kegg <- data.frame(V1 = as.character(unique(kegg$V1)))
wiki <- data.frame(V1 = as.character(unique(wiki$V1)))
reac <- data.frame(V1 = as.character(unique(reac$V1)))
query <- "select * from analytehaspathway;"
analyteHasPathway <- unique(dbGetQuery(con,query))
rampIdHasPathway <- unique(analyteHasPathway$rampId)
rampIdForHMDB <- finderPathways(hmdb,rampIdHasPathway)
rampIdForKEGG <- finderPathways(kegg,rampIdHasPathway)
rampIdForWIKI <- finderPathways(wiki,rampIdHasPathway)
rampIdForREAC <- finderPathways(reac,rampIdHasPathway)
pathwaysForHMDB <- finderPathways2(rampIdForHMDB)
resultHMDB <- finderPathways3(pathwaysForHMDB)
pathwaysForKEGG <- finderPathways2(rampIdForKEGG)
resultKEGG <- finderPathways3(pathwaysForKEGG)
pathwaysForWIKI <- finderPathways2(rampIdForWIKI)
resultWIKI <- finderPathways3(pathwaysForWIKI)
pathwaysForREAC <- finderPathways2(rampIdForREAC)
resultREAC <- finderPathways3(pathwaysForREAC)
library(plotly)
plot.hmdb <- resultHMDB[order(resultHMDB$hmdb,decreasing = T) & resultHMDB$hmdb!=0,]
plot.kegg <- resultKEGG[order(resultKEGG$kegg,decreasing = T) & resultKEGG$kegg!=0,]
plot.wiki <- resultWIKI[order(resultWIKI$wiki,decreasing = T) & resultWIKI$wiki!=0,]
plot.reac <- resultREAC[order(resultREAC$reac,decreasing = T) & resultREAC$reac!=0,]
plot.data <- list()
plot.data[[1]] <- plot.hmdb
plot.data[[2]] <- plot.kegg
plot.data[[3]] <- plot.wiki
plot.data[[4]] <- plot.reac
database <- c("hmdb",'kegg','wiki','reac')
for(i in 1:4){
rampId <- as.character(unique(plot.data[[i]]$metabolites))
rampId <- sapply(rampId,shQuote)
rampId <- paste(rampId,collapse = ",")
query <- paste("select * from analytesynonym where rampId in(",rampId,") group by rampId;")
synonymdf1 <- dbGetQuery(con,query)
plot.data[[i]] <- merge(plot.data[[i]],synonymdf1[,1:2],by.x = "metabolites",by.y="rampId",all.x = T)
}
for(i in 1:4){
plot.data[[i]] <- plot.data[[i]][order(plot.data[[i]][,i+2],decreasing = T),]
}
for(i in 1:4){
write.csv(plot.data[[i]],
file = paste0(database[i],"promiscuous.csv"),
row.names = F)
}
m <- list(
l = 100,
r = 100,
t = 100,
b = 100
)
h <- 1000
w <- 1000
length(plot.data[[1]]$Synonym)
p_hmdb <- plot_ly(x = 1:length(plot.data[[1]]$Synonym),
y = plot.data[[1]]$hmdb,
type = "bar",
height = h,
width = w) %>%
layout(title = "HMDB metabolites vs. Pathways",
margin = m,
font = list(
size = 24
),
yaxis = list(
title = "Number of pathways metabolites are involved in",
font = list(
size = 24
)
),
xaxis = list(
title = paste("Total", nrow(resultHMDB),"unique metabolites have pathways from HMDB"),
showticklabels = FALSE,
font = list(
size = 24
)
))
for(i in 1:5){
df <- plot.data[[1]]
ay <- 40
if(i == 4){
ay <- -15
ax <- 40
}else if(i ==5){
ay <- 15
ax <- 80
} else{
ay <- 40
ax <- 40
}
p_hmdb <- p_hmdb %>%
add_annotations(
text = df$Synonym[i],
x = i,
y = df$hmdb[i],
ax = 40,
ay = ay,
xanchor = "left",
yanchor = "bottom"
)
}
p_hmdb
shiny::runApp('~/RProject/BiometricsUI')
